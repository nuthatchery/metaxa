%% Statements.sdf is part of Magnolia
%%
%% Copyright (C) 2008,2009  Anya Helene Bagge
%% Copyright (C) 2008,2009  University of Bergen
%%
%% Contact: <magnolia@magnolia-lang.org>
%%
%% This program is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.
%% 
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%% 
%% You should have received a copy of the GNU General Public License
%% along with this program.  If not, see <http://www.gnu.org/licenses/>.
module Magnolia/BaseExt/Statements
  
exports
  sorts
    Stat
    Expr	ProcName	AttrClause
    Identifier	Type

  context-free syntax

%%    "if" Expr "then" Stat* "end" -> Stat {cons("BaseIfThen")}
%%    "if" "(" Expr ")" Stat -> Stat {prefer, cons("CIfThen")}
%%    "if" "(" Expr ")" Stat "else" Stat -> Stat {cons("CIf")}

%%    "while" "(" Expr ")" Stat -> Stat {cons("CWhile")}

%%    "open" "(" {Identifier ","}* ")" Stat -> Stat {cons("BaseOpen")}

    "for" Identifier "in" Expr Stat -> Stat {cons("BaseFor")}

    "print" {Expr ","}* ";" -> Stat {prefer, cons("BasePrintLn")}

    "print" {Expr ","}* "," ";" -> Stat {prefer, cons("BasePrint")}

%%    Identifier "." Identifier "=" Expr ";" -> Stat {cons("BaseFieldAssign")}
%%    Identifier "[" {Expr ";"}+ "]" "=" Expr ";" -> Stat {cons("BaseIndexedAssign")}

    "var" Identifier ":" Type "=" Expr ";" -> Stat {cons("BaseVarDefTI")}

    "var" Identifier "=" Expr ";" -> Stat {cons("BaseVarDefI")}

    "var" Identifier ";" -> Stat {cons("BaseVarDefI")}

    "var" Identifier ":" Type ";" -> Stat {cons("BaseVarDefT")}
