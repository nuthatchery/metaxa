package org.magnolialang.xatree;

import java.util.HashMap;
import java.util.Map;
import org.eclipse.imp.pdb.facts.IList;
import static org.magnolialang.xatree.XaTreeFactory.*;

class MagnoliaSkinTable {
	public static Map<String,IList> getMap() {
		Map<String,IList> tbl = new HashMap<String,IList>();

		tbl.put("Yield/1:Stat", vf.list(token("yield"), space(" "), child(0), space(" "), token(";")));
		tbl.put("Morphisms/1:Morphism", vf.list(token("["), space(" "), child(0), space(" "), token("]")));
		tbl.put("PredClause/2:PredClause", vf.list(token("predicate"), space(" "), child(0), space(" "), child(1)));
		tbl.put("Partition/2:Decl", vf.list(token("partition"), space(" "), child(0), space(" "), token("by"), space(" "), child(1), space(" "), token(";")));
		tbl.put("Oct/1:Literal", vf.list(child(0)));
		tbl.put("Free/2:Decl", vf.list(token("free"), space(" "), child(0), space(" "), token("by"), space(" "), child(1), space(" "), token(";")));
		tbl.put("BaseVarDefI/2:Stat", vf.list(token("var"), space(" "), child(0), space(" "), token("="), space(" "), child(1), space(" "), token(";")));
		tbl.put("Times/2:ConceptExpr", vf.list(child(0), space(" "), token("times"), space(" "), child(1)));
		tbl.put("Congruence/1:ProcClause", vf.list(token("congruence"), space(" "), child(0)));
		tbl.put("UserSyntax2/1:Expr", vf.list(child(0)));
		tbl.put("Fun/1:Fun", vf.list(child(0)));
		tbl.put("QName/2:Name", vf.list(child(0), space(" "), token("."), space(" "), child(1)));
		tbl.put("AliasType/1:DataRep", vf.list(token("type"), space(" "), child(0), space(" "), token(";")));
		tbl.put("Opens/1:SubClause", vf.list(token("opens"), space(" "), token("("), space(" "), child(0), space(" "), token(")")));
		tbl.put("Nrm/0:ParamMode", vf.list(token("nrm")));
		tbl.put("Upd/0:ParamMode", vf.list(token("upd")));
		tbl.put("AnonParam/1:FunctionParam", vf.list(child(0)));
		tbl.put("Undefined/0:Expr", vf.list(token("_")));
		tbl.put("Nop/0:Stat", vf.list(token(";")));
		tbl.put("MagnoliaTree/2:Program", vf.list(child(0), space(" "), child(1)));
		tbl.put("At/2:ImplExpr", vf.list(child(0), space(" "), token("@"), space(" "), child(1)));
		tbl.put("String/1:StringLiteral", vf.list(token("\""), space(" "), child(0), space(" "), token("\"")));
		tbl.put("VarClause/2:VarClause", vf.list(token("var"), space(" "), child(0), space(" "), token(":"), space(" "), child(1)));
		tbl.put("ModelsImpl/5:Decl", vf.list(token("satisfaction"), space(" "), child(0), space(" "), child(1), space(" "), token("="), space(" "), child(2), space(" "), child(3), space(" "), token("models"), space(" "), child(4)));
		tbl.put("Requires/1:Decl", vf.list(token("requires"), space(" "), child(0), space(" "), token(";")));
		tbl.put("Exp/0:ParamMode", vf.list(token("exp")));
		tbl.put("Protect/2:MorphClause", vf.list(token("protect"), space(" "), child(0), space(" "), token("guard"), space(" "), child(1)));
		tbl.put("AltType/2:Type", vf.list(child(0), space(" "), token("|"), space(" "), child(1)));
		tbl.put("Unresolved/1:ConceptClauseArgument", vf.list(child(0)));
		tbl.put("Generate/2:Decl", vf.list(token("generate"), space(" "), child(0), space(" "), token("by"), space(" "), child(1), space(" "), token(";")));
		tbl.put("Dummy/1:QuotedString", vf.list(token("\""), space(" "), child(0), space(" "), token("\"")));
		tbl.put("UnionRep/1:DataRep", vf.list(token("union"), space(" "), token("{"), space(" "), child(0), space(" "), token("}")));
		tbl.put("UserSyntax0/3:Stat", vf.list(child(0), space(" "), token("."), space(" "), child(1), space(" "), token("="), space(" "), child(2), space(" "), token(";")));
		tbl.put("DataInvariant/1:ProcClause", vf.list(token("dataInvariant"), space(" "), child(0)));
		tbl.put("UserSyntax3/2:Stat", vf.list(token("if"), space(" "), child(0), space(" "), token("then"), space(" "), child(1), space(" "), token("end")));
		tbl.put("BinOp/3:Expr", vf.list(child(0), space(" "), child(1), space(" "), child(2)));
		tbl.put("Del/0:ParamMode", vf.list(token("del")));
		tbl.put("ListCons/1:Expr", vf.list(token("["), space(" "), child(0), space(" "), token("]")));
		tbl.put("DefDecl/4:SemiDecl", vf.list(child(0), space(" "), child(1), space(" "), child(2), space(" "), token("="), space(" "), child(3), space(" "), token(";")));
		tbl.put("QED/0:AssertClause", vf.list(token("qed")));
		tbl.put("Assign/2:Stat", vf.list(child(0), space(" "), token("="), space(" "), child(1), space(" "), token(";")));
		tbl.put("Return/1:Stat", vf.list(token("return"), space(" "), child(0), space(" "), token(";")));
		tbl.put("PlusPlus/2:ConceptExpr", vf.list(child(0), space(" "), token("++"), space(" "), child(1)));
		tbl.put("Default/1:SubClause", vf.list(token("default"), space(" "), token("("), space(" "), child(0), space(" "), token(")")));
		tbl.put("WithClause/1:WithClause", vf.list(token("with"), space(" "), child(0)));
		tbl.put("Morphism/1:Morphism", vf.list(token("morphism"), space(" "), child(0)));
		tbl.put("Var/2:Var", vf.list(child(0), space(" "), token(":"), space(" "), child(1)));
		tbl.put("Struct/2:Expr", vf.list(child(0), space(" "), token("$"), space(" "), token("{"), space(" "), child(1), space(" "), token("}")));
		tbl.put("DefDecl/4:BraceDecl", vf.list(child(0), space(" "), child(1), space(" "), child(2), space(" "), child(3)));
		tbl.put("Block/1:BlockStat", vf.list(token("{"), space(" "), child(0), space(" "), token("}")));
		tbl.put("By/1:AssertClause", vf.list(token("by"), space(" "), child(0)));
		tbl.put("VarDef/3:LetClause", vf.list(token("var"), space(" "), child(0), space(" "), token(":"), space(" "), child(1), space(" "), token("="), space(" "), child(2), space(" "), token(";")));
		tbl.put("Break/0:Stat", vf.list(token("break"), space(" "), token(";")));
		tbl.put("Impl/1:ImplExpr", vf.list(child(0)));
		tbl.put("AtAt/2:ConceptExpr", vf.list(child(0), space(" "), token("@@"), space(" "), child(1)));
		tbl.put("ImplBody/1:ImplExpr", vf.list(child(0)));
		tbl.put("Congruence/1:FunClause", vf.list(token("congruence"), space(" "), child(0)));
		tbl.put("Field/2:InitSpec", vf.list(child(0), space(" "), token(":="), space(" "), child(1)));
		tbl.put("StarStar/2:ImplExpr", vf.list(child(0), space(" "), token("**"), space(" "), child(1)));
		tbl.put("UserSyntax1/3:Stat", vf.list(child(0), space(" "), token("["), space(" "), child(1), space(" "), token("]"), space(" "), token("="), space(" "), child(2), space(" "), token(";")));
		tbl.put("SimpleModule/0:ModuleHead", vf.list());
		tbl.put("UserSyntax4/2:Stat", vf.list(token("if"), space(" "), token("("), space(" "), child(0), space(" "), token(")"), space(" "), token("{"), space(" "), child(1), space(" "), token("}")));
		tbl.put("Imports/1:ModuleClause", vf.list(token("imports"), space(" "), child(0)));
		tbl.put("Dummy/1:FunctionParamList", vf.list(token("("), space(" "), child(0), space(" "), token(")")));
		tbl.put("Name/1:Identifier", vf.list(child(0)));
		tbl.put("ImplClause/4:Decl", vf.list(child(0), space(" "), token("implementation"), space(" "), child(1), space(" "), child(2), space(" "), token("="), space(" "), child(3)));
		tbl.put("Param/2:FunctionParam", vf.list(child(0), space(" "), token(":"), space(" "), child(1)));
		tbl.put("ConceptClause/4:Decl", vf.list(child(0), space(" "), token("concept"), space(" "), child(1), space(" "), child(2), space(" "), token("="), space(" "), child(3)));
		tbl.put("ImplMorph/1:MorphClause", vf.list(child(0)));
		tbl.put("BaseVarDefT/2:Stat", vf.list(token("var"), space(" "), child(0), space(" "), token(":"), space(" "), child(1), space(" "), token(";")));
		tbl.put("FunClause/2:FunClause", vf.list(token("define"), space(" "), child(0), space(" "), token(":"), space(" "), child(1)));
		tbl.put("Out/0:ParamMode", vf.list(token("out")));
		tbl.put("Assert/2:Stat", vf.list(token("assert"), space(" "), child(0), space(" "), child(1), space(" "), token(";")));
		tbl.put("Proc/1:ProcName", vf.list(child(0)));
		tbl.put("For/3:Stat", vf.list(token("for"), space(" "), child(0), space(" "), token("in"), space(" "), child(1), space(" "), token("do"), space(" "), child(2), space(" "), token("end")));
		tbl.put("Guard/1:GuardClause", vf.list(token("guard"), space(" "), child(0)));
		tbl.put("Plus/2:ConceptExpr", vf.list(child(0), space(" "), token("+"), space(" "), child(1)));
		tbl.put("ImportModule/1:ImportClause", vf.list(token("module"), space(" "), child(0)));
		tbl.put("ImplMorphism/1:MorphClause", vf.list(token("{"), space(" "), child(0), space(" "), token("}")));
		tbl.put("While/2:Stat", vf.list(token("while"), space(" "), child(0), space(" "), token("do"), space(" "), child(1), space(" "), token("end")));
		tbl.put("ModuleHead/2:ModuleHead", vf.list(token("module"), space(" "), child(0), space(" "), child(1), space(" "), token(";")));
		tbl.put("Attr/1:Attribute", vf.list(child(0)));
		tbl.put("NumRep/2:DataRep", vf.list(child(0), space(" "), token(".."), space(" "), child(1), space(" "), token(";")));
		tbl.put("TermCons0/1:ConsSpec", vf.list(child(0)));
		tbl.put("ExternalLib/4:ImplExpr", vf.list(token("external"), space(" "), child(0), space(" "), child(1), space(" "), token("on"), space(" "), child(2), space(" "), token("defines"), space(" "), child(3)));
		tbl.put("BasePrintLn/1:Stat", vf.list(token("print"), space(" "), child(0), space(" "), token(";")));
		tbl.put("Call/2:Stat", vf.list(token("call"), space(" "), child(0), space(" "), token("("), space(" "), child(1), space(" "), token(")"), space(" "), token(";")));
		tbl.put("If/3:Stat", vf.list(token("if"), space(" "), child(0), space(" "), token("then"), space(" "), child(1), space(" "), token("else"), space(" "), child(2), space(" "), token("end")));
		tbl.put("BlockExpr/1:Expr", vf.list(token("{"), space(" "), child(0), space(" "), token("}")));
		tbl.put("Dummy/1:Type", vf.list(token("("), space(" "), child(0), space(" "), token(")")));
		tbl.put("Dummy/1:ProcedureParamList", vf.list(token("("), space(" "), child(0), space(" "), token(")")));
		tbl.put("Pragma/2:CompileClause", vf.list(child(0), space(" "), token("("), space(" "), child(1), space(" "), token(")"), space(" "), token(";")));
		tbl.put("In/2:Expr", vf.list(child(0), space(" "), token("in"), space(" "), child(1)));
		tbl.put("MorphedConcept/2:ConceptExpr", vf.list(child(0), space(" "), child(1)));
		tbl.put("AxiomClause/2:AxiomClause", vf.list(token("axiom"), space(" "), child(0), space(" "), child(1)));
		tbl.put("TermCons/2:ConsSpec", vf.list(child(0), space(" "), token("("), space(" "), child(1), space(" "), token(")")));
		tbl.put("AtAt/2:ImplExpr", vf.list(child(0), space(" "), token("@@"), space(" "), child(1)));
		tbl.put("BaseVarDefTI/3:Stat", vf.list(token("var"), space(" "), child(0), space(" "), token(":"), space(" "), child(1), space(" "), token("="), space(" "), child(2), space(" "), token(";")));
		tbl.put("ImplMorph/2:ImplExpr", vf.list(child(0), space(" "), child(1)));
		tbl.put("TypeExpr/1:Expr", vf.list(token(":"), space(" "), child(0)));
		tbl.put("ListCons/2:Expr", vf.list(token("["), space(" "), child(0), space(" "), token("|"), space(" "), child(1), space(" "), token("]")));
		tbl.put("Struct/1:Type", vf.list(token("struct"), space(" "), child(0)));
		tbl.put("Index/2:Expr", vf.list(child(0), space(" "), token("["), space(" "), child(1), space(" "), token("]")));
		tbl.put("Star/2:ImplExpr", vf.list(child(0), space(" "), token("*"), space(" "), child(1)));
		tbl.put("Type/1:Type", vf.list(child(0)));
		tbl.put("OnDefines/2:ImplExpr", vf.list(token("on"), space(" "), child(0), space(" "), token("defines"), space(" "), child(1)));
		tbl.put("BaseVarDefI/1:Stat", vf.list(token("var"), space(" "), child(0), space(" "), token(";")));
		tbl.put("ExternalLib/3:ImplExpr", vf.list(token("external"), space(" "), child(0), space(" "), child(1), space(" "), token("defines"), space(" "), child(2)));
		tbl.put("BasePrint/1:Stat", vf.list(token("print"), space(" "), child(0), space(" "), token(","), space(" "), token(";")));
		tbl.put("Let/2:Stat", vf.list(token("let"), space(" "), child(0), space(" "), token("in"), space(" "), child(1), space(" "), token("end")));
		tbl.put("ConceptBody/1:ConceptExpr", vf.list(child(0)));
		tbl.put("Assign/0:ProcIdentifier", vf.list(token("_=_")));
		tbl.put("FunClause/3:FunClause", vf.list(token("function"), space(" "), child(0), space(" "), child(1), space(" "), token(":"), space(" "), child(2)));
		tbl.put("Library/4:Decl", vf.list(child(0), space(" "), token("library"), space(" "), child(1), space(" "), child(2), space(" "), token("="), space(" "), child(3)));
		tbl.put("CompilePragma/2:ModuleClause", vf.list(token("compile"), space(" "), token("\""), space(" "), child(0), space(" "), token("\""), space(" "), token("{"), space(" "), child(1), space(" "), token("}")));
		tbl.put("Protect/2:Morphism", vf.list(token("protect"), space(" "), child(0), space(" "), token("guard"), space(" "), child(1)));
		tbl.put("StructRep/1:DataRep", vf.list(token("struct"), space(" "), token("{"), space(" "), child(0), space(" "), token("}")));
		tbl.put("Literal/1:Expr", vf.list(child(0)));
		tbl.put("Apply/2:Expr", vf.list(child(0), space(" "), token("("), space(" "), child(1), space(" "), token(")")));
		tbl.put("Rename/2:MorphClause", vf.list(child(0), space(" "), token("=>"), space(" "), child(1)));
		tbl.put("Language/1:ModuleClause", vf.list(token("language"), space(" "), child(0)));
		tbl.put("Morphism/1:MorphClause", vf.list(child(0)));
		tbl.put("Star/2:ConceptExpr", vf.list(child(0), space(" "), token("*"), space(" "), child(1)));
		tbl.put("TypeClause/1:TypeClause", vf.list(token("type"), space(" "), child(0)));
		tbl.put("Name/1:Name", vf.list(child(0)));
		tbl.put("Obs/0:ParamMode", vf.list(token("obs")));
		tbl.put("Attrs/1:AttrClause", vf.list(token("["), space(" "), child(0), space(" "), token("]")));
		tbl.put("Attr/2:Attribute", vf.list(child(0), space(" "), token("("), space(" "), child(1), space(" "), token(")")));
		tbl.put("Real/1:Literal", vf.list(child(0)));
		tbl.put("Nop/0:Decl", vf.list(token(";")));
		tbl.put("Morphism/1:SubClause", vf.list(token("morphism"), space(" "), child(0)));
		tbl.put("Hex/1:Literal", vf.list(child(0)));
		tbl.put("BaseFor/3:Stat", vf.list(token("for"), space(" "), child(0), space(" "), token("in"), space(" "), child(1), space(" "), child(2)));
		tbl.put("AnonParam/2:ProcedureParam", vf.list(child(0), space(" "), token(":"), space(" "), child(1)));
		tbl.put("DefDecl/4:Decl", vf.list(child(0), space(" "), child(1), space(" "), child(2), space(" "), token("="), space(" "), child(3), space(" "), token(";")));
		tbl.put("DataInvariant/1:FunClause", vf.list(token("dataInvariant"), space(" "), child(0)));
		tbl.put("StarStar/2:ConceptExpr", vf.list(child(0), space(" "), token("**"), space(" "), child(1)));
		tbl.put("NilType/0:Type", vf.list(token("("), space(" "), token(")")));
		tbl.put("Times/2:ImplExpr", vf.list(child(0), space(" "), token("times"), space(" "), child(1)));
		tbl.put("Requires/1:ModuleClause", vf.list(token("requires"), space(" "), child(0)));
		tbl.put("ObsParam/2:ProcedureParam", vf.list(child(0), space(" "), token(":"), space(" "), child(1)));
		tbl.put("UserSyntax5/3:Stat", vf.list(token("if"), space(" "), token("("), space(" "), child(0), space(" "), token(")"), space(" "), token("{"), space(" "), child(1), space(" "), token("}"), space(" "), token("else"), space(" "), token("{"), space(" "), child(2), space(" "), token("}")));
		tbl.put("Param/3:ProcedureParam", vf.list(child(0), space(" "), child(1), space(" "), token(":"), space(" "), child(2)));
		tbl.put("DotOp/2:Expr", vf.list(child(0), space(" "), token("."), space(" "), child(1)));
		tbl.put("ImportRequires/2:RequiresClause", vf.list(child(0), space(" "), token("<"), space(" "), child(1), space(" "), token(">")));
		tbl.put("Bin/1:Literal", vf.list(child(0)));
		tbl.put("Return/0:Stat", vf.list(token("return"), space(" "), token(";")));
		tbl.put("PlusPlus/2:ImplExpr", vf.list(child(0), space(" "), token("++"), space(" "), child(1)));
		tbl.put("DeclBody/1:DeclBody", vf.list(token("{"), space(" "), child(0), space(" "), token("}")));
		tbl.put("ProdType/2:ProdType", vf.list(child(0), space(" "), token(","), space(" "), child(1)));
		tbl.put("ProcClause/2:ProcClause", vf.list(token("procedure"), space(" "), child(0), space(" "), child(1)));
		tbl.put("NotIn/2:Expr", vf.list(child(0), space(" "), token("not"), space(" "), token("in"), space(" "), child(1)));
		tbl.put("SignatureOf/1:ConceptExpr", vf.list(token("signature"), space(" "), child(0)));
		tbl.put("NoDefDecl/2:Decl", vf.list(child(0), space(" "), child(1), space(" "), token(";")));
		tbl.put("Plus/2:ImplExpr", vf.list(child(0), space(" "), token("+"), space(" "), child(1)));
		tbl.put("ImportAll/1:ImportClause", vf.list(child(0)));
		tbl.put("Concept/1:ConceptExpr", vf.list(child(0)));
		tbl.put("TermRep/1:DataRep", vf.list(child(0), space(" "), token(";")));
		tbl.put("Giv/0:ParamMode", vf.list(token("giv")));
		tbl.put("ImportRename/2:ImportClause", vf.list(token("module"), space(" "), child(0), space(" "), token("="), space(" "), child(1)));
		tbl.put("PreOp/2:Expr", vf.list(child(0), space(" "), child(1)));
		tbl.put("Protect/2:SubClause", vf.list(token("protect"), space(" "), child(0), space(" "), token("guard"), space(" "), child(1)));
		tbl.put("Int/1:Literal", vf.list(child(0)));
		tbl.put("Tuple/1:Expr", vf.list(token("("), space(" "), child(0), space(" "), token(")")));
		tbl.put("IfThenElseExpr/3:Expr", vf.list(token("if"), space(" "), child(0), space(" "), token("then"), space(" "), child(1), space(" "), token("else"), space(" "), child(2), space(" "), token("end")));
		tbl.put("Open/2:Stat", vf.list(token("open"), space(" "), child(0), space(" "), token("in"), space(" "), child(1), space(" "), token("end")));
		return tbl;
	}
}
