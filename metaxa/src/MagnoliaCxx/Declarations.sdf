
module MagnoliaCxx/Declarations


exports

%%% Declaration and definition sentences

  sorts
	Decl		SubClause
	StatDeclarative ExprDeclarative
	TypeDeclarative	%% DeclDeclarative 

  %% Externals
	BlockStat	Expr
	Type		DataRep
	Name

  context-free syntax

	"#" "include" IncludeFileName "\n" -> Decl {cons("Include")}
		
    Modifier* StatDeclarative SubClause* BlockStat
	-> BraceDecl
		{cons("DefDecl")}

    Modifier* ExprDeclarative SubClause* "{" "return" Expr ";" "}"
	-> SemiDecl
		{cons("DefDecl")}

    Modifier* "typedef" TypeDeclarative SubClause* "=" Type ";"
	-> Decl
		{cons("DefDecl")}

    Modifier* DeclDeclarative SubClause* DeclBody
	-> BraceDecl
		{cons("DefDecl")}

    Modifier* StatDeclarative SubClause* ";"
	-> Decl
		{cons("NoDefDecl")}

    Modifier* ExprDeclarative SubClause* ";"
	-> Decl
		{cons("NoDefDecl")}

    Modifier* "struct" TypeDeclarative SubClause* ";"
	-> Decl
		{cons("NoDefDecl")}

    "{" Decl* "}" -> DeclBody {cons("DeclBody"), dummy}

    SemiDecl -> Decl {abstract}

    BraceDecl -> Decl {abstract}


	
%%% Procedure Declarations
  sorts
    ProcClause ProcName ProcIdentifier

  context-free syntax

    "void" ProcIdentifier ProcedureParamList
	-> ProcClause
		{cons("ProcClause")}

    ProcClause -> StatDeclarative

    Identifier -> ProcIdentifier

	Name -> ProcName
	
    "operator" "=" -> ProcIdentifier {cons("Assign")}

%%% Function Declarations
  sorts
    FunClause FunName FunIdentifier

  context-free syntax

    Type FunIdentifier FunctionParamList
	-> FunClause			{cons("FunClause")}

    FunClause -> ExprDeclarative

	Identifier -> FunIdentifier
	
	Name -> FunName
	
	"guard" Expr -> GuardClause {cons("Guard")}
	
	GuardClause -> SubClause
	
  lexical restrictions

    "function"		-/- [A-Za-z\_\$0-9]

%%% Predicate Declarations
  sorts
    PredClause PredName

  context-free syntax

    "predicate" FunIdentifier FunctionParamList
	-> PredClause			{cons("PredClause")}

    PredClause -> ExprDeclarative

  lexical restrictions

    "predicate"		-/- [A-Za-z\_\$0-9]


%%% Axiom Declarations
  sorts
    AxiomClause AxiomName AxiomIdentifier

  context-free syntax

    "axiom" Identifier FunctionParamList
	-> AxiomClause			{cons("AxiomClause")}

    "theorem" Identifier FunctionParamList
	-> AxiomClause			{cons("AxiomClause")}

    "proof" Identifier FunctionParamList
	-> AxiomClause			{cons("AxiomClause")}

    AxiomClause -> StatDeclarative

    Name -> AxiomName
    
    Identifier -> AxiomIdentifier

  lexical restrictions

    "axiom"		-/- [A-Za-z\_\$0-9]
    "proof"		-/- [A-Za-z\_\$0-9]

%%% Parameters and Parameter Modes
  sorts
	TypeParamList TypeParam
	FunctionParamList FunctionParam
	ProcedureParamList ProcedureParam
	ParamMode

  context-free syntax

   %% "(" {TypeParam ","}* ")"	-> TypeParamList	{cons("Dummy")}

    "(" {FunctionParam ","}* ")"-> FunctionParamList	{cons("Dummy")}

    "(" {ProcedureParam ","}* ")"-> ProcedureParamList	{cons("Dummy")}

   %% Type			-> TypeParam		{cons("TypeExprParam")}

   %% Type Identifier		-> TypeParam		{cons("TypeExprParam")}

   %% "type"			-> TypeParam		{cons("AnonTypeParam")}

   %% "type" Identifier		-> TypeParam		{cons("TypeParam")}

   %% "type" TypeParamList	-> TypeParam		{cons("AnonTypePParam")}

   %% "type" Identifier TypeParamList -> TypeParam	{cons("TypePParam")}

    Type VarIdentifier		-> FunctionParam	{cons("Param")}

    Type VarIdentifier		-> ProcedureParam	{prefer, cons("Param")}

    Type Identifier			-> ProcedureParam	{cons("ObsParam")}

    Type				-> ProcedureParam	{cons("AnonParam")}

%%% Variables

  sorts VarClause VarIdentifier VarName
  
  context-free syntax

    Type VarIdentifier -> VarClause {cons("VarClause")}

    VarClause -> ExprDeclarative

	Identifier -> VarIdentifier
	
	Name -> VarName
	
%%% Types and Classes

  sorts 
	TypeClause TypeName TypeIdentifier

  context-free syntax

    "struct" TypeIdentifier	-> TypeClause {cons("TypeClause")}

    TypeClause -> TypeDeclarative

	Name -> TypeName
	
	Identifier -> TypeIdentifier
	
  lexical restrictions

    "struct"		-/- [A-Za-z\_\$0-9]

