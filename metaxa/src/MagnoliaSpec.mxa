language module MagnoliaSpec

sorts
  ConceptExpr
  ImplExpr
  Morphism
  Decl
  
  
construct concept TopDecl:
  
	syntax
 
  	decl(: concept Name Attrs = ConceptExpr :)
  	
	patterns
  
  		decl("concept", Name, Attrs, ConceptExpr)
  
construct implementation TopDecl:

	syntax

		(: implementation Name Attrs on ConceptExpr defines ImplExpr :)
		
	patterns
	
		decl("implementation", Name, Attrs, 
construct generic Decl:

	declare rules
	
		decl(Sort, Name, Attrs, X) :- defines<Sort, qualify(Name), Name, Attrs, X>@unresolved

construct literal ConceptExpr:

	syntax
	
		conceptexpr(: { Decl* } :)
	
	rules
	
							Decl* ==> Decl'*
		---------------------------------------------------------
		conceptexpr(: { Decl* } :) ==> conceptexpr(; { Decl'* } ;)

construct named ConceptExpr:

	syntax
	
		conceptexpr(: Name :)
		
	rules
	
		Name --lookupDef("concept")-isUnique-> Name'
		-------------------------------------------
		conceptexpr(: Name :) ==> conceptexpr(; Name' ;)

/*
construct morphed ConceptExpr:

	syntax
	
		conceptexpr(: ConceptExpr Morphism :)
		
	rules
	
			ConceptExpr ==> ConceptExpr'
			ConceptExpr' --flatten-> Decl*
			Morphism ==declare(Decl*)=> Morphism'
		-----------------------------------------------------------
		(: ConceptExpr Morphism :) ==> (; ConceptExpr' Morphism' ;)
		
construct requires Decl:

	syntax

		(:
		
		*/ 