
module Magnolia/Core/Institutions


exports
  sorts
  	Modifier
  	
  context-free syntax
  	
	"default" -> Modifier	{cons("DefaultModifier")}
	
	"abstract" -> Modifier	{cons("AbstractModifier")}

%%% Concepts and implementations

  sorts 
	 TopDecl

  context-free syntax

    Modifier* "concept" Identifier SubClause* "=" InstExpr
    	-> TopDecl {cons("ConceptDef")}

    Modifier* "implementation" Identifier SubClause* "=" InstExpr
    	-> TopDecl {cons("ImplDef")}
 
 	Modifier* "library" Identifier SubClause* "=" InstExpr
 		-> TopDecl {cons("LibraryDef")}

    Modifier* "satisfaction" Identifier SubClause* "=" SatisfactionExpr
 		-> TopDecl	{cons("SatisfactionDef")}

    Modifier* "implementation" Identifier SubClause* ImplExpr
    	 -> Decl {deprecated("Add '=' before body"), cons("ImplDef")}

    Modifier* "concept" Identifier SubClause* DeclBody
    	-> TopDecl {deprecated("Add '=' before body"), cons("ConceptDef")}
 	
 	
  lexical restrictions

    "concept"			-/- [A-Za-z\_\$0-9]
    "implementation"	-/- [A-Za-z\_\$0-9]
    "library"			-/- [A-Za-z\_\$0-9]
    "satisfaction"		-/- [A-Za-z\_\$0-9]

 
%% Institution Expressions

  sorts
  	InstExpr
  	
  context-free syntax
 
 	Name				-> InstExpr

	
  	AlgDecl 			-> InstExpr
  	
  	"signature" InstExpr	-> InstExpr		{left, cons("SignatureOf")}
  	
  	"full" InstExpr			-> InstExpr		{left,cons("FullOf")}

  	"on" InstExpr			-> InstExpr		{left, cons("OnOf")}

  	"declared" InstExpr		-> InstExpr		{left, cons("DeclaredOf")}

  	InstExpr FilterExpr		-> InstExpr		{left, cons("Filtered")}
  	
  	"retain" InstExpr		-> FilterExpr	{cons("RetainFilter")}
  	
  	"remove" InstExpr		-> FilterExpr	{cons("RemoveFilter")}

  	InstExpr "[" {Renaming ","}* "]" -> InstExpr	{left, cons("Renamed")}
 
 	"[" {Renaming ","}* "]" -> InstExpr		{cons("RenameImpl")}
 	
 	"(" InstExpr ")" -> InstExpr	{bracket}
 	 	
 	%% Concepts
 	
	InstExpr "morphism" InstExpr	-> InstExpr	{left,cons("Morphed")}
 	
	InstExpr "protect" AlgDecl		-> InstExpr {left,cons("Protected")}
 	
%%	InstExpr "protect" {SingleAlgDecl ","}+		-> InstExpr {left,avoid,deprecated("Wrap protect body in {}"),cons("Protected")}

 	%% Libraries and Implementations
 	
 	"on" InstExpr "defines" AlgDecl	-> InstExpr {cons("OnDefines")}
 	
	"defines" AlgDecl					-> InstExpr	{cons("Defines")}
 		
	"external" ExternalExpr				-> InstExpr {cons("External")}
 		
	InstExpr "@" InstExpr				-> InstExpr {left,cons("At")}
 		
	InstExpr "@@" InstExpr				-> InstExpr {left,cons("AtAt")}

	InstExpr "+" InstExpr				-> InstExpr {left,cons("Plus")}
 		
	InstExpr "++" InstExpr				-> InstExpr {left,cons("PlusPlus")}
 		
	InstExpr "**" InstExpr				-> InstExpr {left,cons("TimesTimes")}

	InstExpr "on" Filter				-> InstExpr {left,cons("OnFilter")}

	InstExpr "declared" Filter			-> InstExpr {left,cons("DeclaredFilter")}
 		
	InstExpr "times" InstExpr			-> InstExpr {left,cons("Times")}

	InstExpr "dataInvariant" InstExpr	-> InstExpr {left,cons("DataInvariant")}

	InstExpr "quotient" InstExpr		-> InstExpr {left,cons("Quotient")}

	InstExpr "homomorphism" InstExpr "on" InstExpr "with" InstExpr
		 								-> InstExpr {left,cons("Homomorphism")}


  lexical restrictions

    "signature"			-/- [A-Za-z\_\$0-9]
    "retain"			-/- [A-Za-z\_\$0-9]
    "remove"			-/- [A-Za-z\_\$0-9]
    "morphism"		-/- [A-Za-z\_\$0-9]
    "protect"		-/- [A-Za-z\_\$0-9]
    "defines"		-/- [A-Za-z\_\$0-9]
    "external"		-/- [A-Za-z\_\$0-9]
    "declared"		-/- [A-Za-z\_\$0-9]
    "times"			-/- [A-Za-z\_\$0-9]
    "dataInvariant"	-/- [A-Za-z\_\$0-9]
    "quotient"		-/- [A-Za-z\_\$0-9]
    "homomorphism"	-/- [A-Za-z\_\$0-9]
    "on"			-/- [A-Za-z\_\$0-9]
    "with"			-/- [A-Za-z\_\$0-9]
    "@"				-/- [\@]
    "@@"			-/- [\@]
    "+"				-/- [\+]
    "++"			-/- [\+]
    "**"			-/- [\*]


%% Externals

  context-free syntax
  
	Identifier Name "defines" InstExpr	
		-> ExternalExpr {cons("ExternalDefines")}

	Identifier Name "on" InstExpr "defines" InstExpr	
		-> ExternalExpr {cons("ExternalOnDefines")}
		
	Identifier Name "extends" InstExpr "on" InstExpr "defines" InstExpr	
		-> ExternalExpr {cons("ExternalExtendsOnDefines")}
		
  lexical restrictions

    "cpp"		-/- [A-Za-z\_\$0-9]
    "on"		-/- [A-Za-z\_\$0-9]
    "defines"	-/- [A-Za-z\_\$0-9]
    "extends"	-/- [A-Za-z\_\$0-9]

%% Renaming

  context-free syntax
  
  	Name "=>" Name -> Renaming	{cons("Rename")}
 
%% Declarations at the Algorithm Level

	DeclBody -> AlgDecl		{cons("Decls")}
	
	SingleAlgDecl -> AlgDecl	{abstract}
	
	Modifier* StatDeclarative SubClause* "=" BlockStat
	-> SingleAlgDecl	{cons("StatDef")}

    Modifier* ExprDeclarative SubClause* "=" Expr
	-> SingleAlgDecl	{cons("ExprDef")}

    Modifier* TypeDeclarative SubClause* "=" Type
	-> SingleAlgDecl	{cons("TypeDef")}

    Modifier* DeclDeclarative SubClause* "=" DeclBody
	-> SingleAlgDecl	{cons("DeclDef")}
 
	Modifier* StatDeclarative SubClause*
	-> SingleAlgDecl	{cons("StatDecl")}

    Modifier* ExprDeclarative SubClause*
	-> SingleAlgDecl	{cons("ExprDecl")}

    Modifier* TypeDeclarative SubClause*
	-> SingleAlgDecl	{cons("TypeDecl")}

    Modifier* DeclDeclarative SubClause*
	-> SingleAlgDecl	{cons("DeclDecl")}
 
%% Extension of Declaration Syntax
  	
  context-free syntax

    "requires" {InstExpr ","}+ ";" 			-> Decl	{cons("Requires")}

	"preserve" InstExpr	";"					-> Decl {cons("Preserve")}
	
	"congruence" InstExpr ";"				-> Decl {cons("Congruence")}
	
	"preserve" InstExpr "on" InstExpr ";"	-> Decl {cons("PreserveOn")}
	
	"congruence" InstExpr "on" InstExpr	";"	-> Decl {cons("CongruenceOn")}
	
	"generate" {Type ","}+ "by" InstExpr ";"-> Decl {cons("GenerateBy")}

	"generate" {Type ","}+ "by" {SingleAlgDecl ","}+ ";"
											-> Decl {avoid,deprecated("Wrap generate by-clause in {}"),cons("GenerateBy")}


	"free" {Type ","}+ "by" InstExpr ";"	-> Decl {cons("FreeBy")}

	"free" {Type ","}+ "by" {SingleAlgDecl ","}+ ";"
											-> Decl {avoid,deprecated("Wrap free by-clause in {}"),cons("FreeBy")}

	"partition" {Type ","}+ "by" InstExpr ";"
											-> Decl {cons("PartitionBy")}
	"partition" {Type ","}+ "by" {SingleAlgDecl ","}+ ";"
											-> Decl {avoid,deprecated("Wrap partition by-clause in {}"),cons("PartitionBy")}


	"homomorphism" InstExpr "on" InstExpr "with" InstExpr ";" 
											-> Decl {cons("HomomorphismOnWith")}
	 
  lexical restrictions

    "requires"		-/- [A-Za-z\_\$0-9]
    "preserve"		-/- [A-Za-z\_\$0-9]
    "congruence"	-/- [A-Za-z\_\$0-9]
    "generate"		-/- [A-Za-z\_\$0-9]
    "free"			-/- [A-Za-z\_\$0-9]
    "partition"		-/- [A-Za-z\_\$0-9]
    "free"			-/- [A-Za-z\_\$0-9]
    "by"			-/- [A-Za-z\_\$0-9]
    "on"			-/- [A-Za-z\_\$0-9]
    "with"			-/- [A-Za-z\_\$0-9]
    
%%% Satisfaction

  context-free syntax
    
    Name	-> SatisfactionExpr	
    
    InstExpr "models" InstExpr
    		-> SatisfactionExpr {cons("Models")}
    
    InstExpr "with" InstExpr "models" InstExpr
    		-> SatisfactionExpr {cons("WithModels")}

  lexical restrictions

    "models"			-/- [A-Za-z\_\$0-9]
    "with"			-/- [A-Za-z\_\$0-9]

context-free priorities


  	InstExpr "[" {Renaming ","}* "]"	-> InstExpr
>  	
 	InstExpr FilterExpr					-> InstExpr
>
{left:
  	"signature" InstExpr	-> InstExpr
  	
  	"full" InstExpr			-> InstExpr	

  	"on" InstExpr			-> InstExpr
  	
  	"declared" InstExpr		-> InstExpr	
}
>
{left: 		
	InstExpr "**" InstExpr				-> InstExpr

	InstExpr "times" InstExpr			-> InstExpr
}
>
{left: 		
	InstExpr "@" InstExpr				-> InstExpr
 		
	InstExpr "@@" InstExpr				-> InstExpr

	InstExpr "+" InstExpr				-> InstExpr
 		
	InstExpr "++" InstExpr				-> InstExpr
}
>
{left:
	InstExpr "on" Filter				-> InstExpr

	InstExpr "declared" Filter			-> InstExpr
 
	InstExpr "dataInvariant" InstExpr	-> InstExpr

	InstExpr "quotient" InstExpr		-> InstExpr

	InstExpr "homomorphism" InstExpr "on" InstExpr "with" InstExpr
		 								-> InstExpr
	InstExpr "morphism" InstExpr	-> InstExpr
 	
	InstExpr "protect" AlgDecl		-> InstExpr
}
>
	"external" ExternalExpr				-> InstExpr
