%% Expressions.sdf is part of Magnolia
%%
%% Copyright (C) 2008,2009  Anya Helene Bagge
%% Copyright (C) 2008,2009  University of Bergen
%%
%% Contact: <magnolia@magnolia-lang.org>
%%
%% This program is free software: you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.
%% 
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%% 
%% You should have received a copy of the GNU General Public License
%% along with this program.  If not, see <http://www.gnu.org/licenses/>.

%% This modules defines the syntax of expression. An expression is one of
%%
%%   - a literal
%%   - a variable
%%   - an operator applied to expressions
%%   - a function applied to expressions
%%   - a type (possibly with expression arguments)
%%   - a control-flow expression

module Magnolia/Core/Expressions

exports
  sorts
    Expr
    InitSpec
    Fun
    Var
    FunName
  %% Externals
    Type
    Identifier
    Literal
    Stat

  context-free syntax

%%% Variables

    "_" -> Expr {cons("Undefined")}

%%% Variables

    Name ":" Type -> Var {cons("Var"), selectable}

    Var -> Expr

%%% Literals

    Literal -> Expr {cons("Literal"), selectable}

%%% Tuple

    "(" {Expr ","}* ")" -> Expr {cons("Tuple"), selectable}

%%% Type Expressions

    ":" Type -> Expr {cons("TypeExpr"), selectable}

%%% Value Construction

    Type "$" "{" {InitSpec ","}* "}" -> Expr {cons("Struct"), selectable, todo("With or without '$'?")}

    Type "{" {InitSpec ","}* "}" -> Expr {cons("Struct"), selectable, todo("With or without '$'?")}

    Identifier ":=" Expr -> InitSpec {cons("Field")}

%%% Function Application

    Fun "(" {Expr ","}* ")" -> Expr {cons("Apply"), selectable}

    FunName -> Fun {cons("Fun")}

    Name -> FunName

%%% Control-flow expressions

    "if" Expr "then" Expr "else" Expr "end" -> Expr {cons("IfThenElseExpr"), selectable}
    "{" Stat* "}" -> Expr {cons("BlockExpr"), selectable}

%%% List Expressions

    "[" {Expr ","}* "]" -> Expr {cons("ListCons")}

    "[" {Expr ","}* "|" Expr "]" -> Expr {cons("ListCons")}





lexical restrictions

  "if"		-/- [A-Za-z\_\$0-9]
  "then" 	-/- [A-Za-z\_\$0-9]
  "else" 	-/- [A-Za-z\_\$0-9]
  "end" 	-/- [A-Za-z\_\$0-9]
  "_"	 	-/- [A-Za-z\_\$0-9]
